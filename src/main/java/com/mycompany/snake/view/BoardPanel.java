/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.snake.view;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author Eduard
 */
public class BoardPanel extends javax.swing.JPanel implements ActionListener {

    private int boardWidth;
    private int boardHeight;
    private int squareSize;
    private Map<Color, List<Point>> squaresColors =  new HashMap<>();
    
    /**
     * Creates new form BoardPanel
     */
    public BoardPanel() {
        initComponents();
        setBackground(Color.BLACK);
        setFocusable(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public void setBoardWidth(int newWidth) {
        boardWidth = newWidth;
    }
    
    public void setBoardHeight(int newHeight) {
        boardHeight = newHeight;
    }
    
    public void setSquareSize(int size) {
        squareSize = size;
    }

    public void setSquaresColors(Map<Color, List<Point>> squaresColors) {
        this.squaresColors = squaresColors;
    }
    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        draw(g);
    }
    
    public void draw(Graphics g) {
        for (int i = 0; i < boardWidth/squareSize; i++) {
            g.drawLine(i * squareSize, 0, i * squareSize, boardHeight);            
        }
        
        for (int i = 0; i < boardHeight/squareSize; i++) {
            g.drawLine(0, i * squareSize, boardWidth, i * squareSize);
        }
        
        // Obtener todos los elementos agrupados por color
        for (Color color : squaresColors.keySet()) {
            g.setColor(color);
            List<Point> points = squaresColors.get(color);
            for (Point point : points) {
                g.fillRect(point.x * squareSize, point.y * squareSize, squareSize, squareSize); 
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
