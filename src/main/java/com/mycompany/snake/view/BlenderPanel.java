/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.snake.view;

import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.SwingConstants;

/**
 *
 * @author Eduard
 */
public class BlenderPanel extends javax.swing.JDialog {

    /**
     * Creates new form BlenderPanel
     */
    public BlenderPanel(SettingsPanel menuPanel) {
        super(menuPanel, "Blender Settings", true);
        initComponents();
        
        pack();
        setLocationRelativeTo(null);
        setFocusable(true);
        setWindowClosingListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn = new javax.swing.JButton();
        randomBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        playBtn = new javax.swing.JButton();
        modeListScroll = new javax.swing.JScrollPane();
        modeList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        backBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        backBtn.setText("ðŸ¡¨");
        backBtn.setMargin(new java.awt.Insets(0, 0, 0, 2));
        backBtn.setMaximumSize(new java.awt.Dimension(26, 26));
        backBtn.setMinimumSize(new java.awt.Dimension(26, 26));
        backBtn.setPreferredSize(new java.awt.Dimension(26, 26));

        randomBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        randomBtn.setText("Random");
        randomBtn.setPreferredSize(new java.awt.Dimension(100, 27));
        randomBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomBtnActionPerformed(evt);
            }
        });

        resetBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        resetBtn.setText("Reset");
        resetBtn.setPreferredSize(new java.awt.Dimension(100, 27));
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        playBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        playBtn.setText("Play");
        playBtn.setPreferredSize(new java.awt.Dimension(100, 27));

        modeListScroll.setPreferredSize(new java.awt.Dimension(200, 192));

        modeList.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        modeList.setFixedCellHeight(27);
        modeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                modeListValueChanged(evt);
            }
        });
        modeListScroll.setViewportView(modeList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(playBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(randomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(modeListScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(modeListScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(randomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(playBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void randomBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomBtnActionPerformed

        List<Integer> validIndices = new ArrayList<>();
        for (int i = 1; i < modeList.getModel().getSize(); i++) {
            validIndices.add(i);
        }
        
        Random random = new Random();
        int numIndicesToSelect;
        double randomChance = random.nextDouble();
        
        if (randomChance < 0.55) {
            numIndicesToSelect = 2;
        } else if (randomChance < 0.85) {
            numIndicesToSelect = 3;
        } else {
            numIndicesToSelect = 4;
        }
        
        // Asegurarse de no seleccionar mÃ¡s Ã­ndices de los disponibles
        numIndicesToSelect = Math.min(numIndicesToSelect, validIndices.size());

        // Barajar la lista de Ã­ndices
        Collections.shuffle(validIndices, random);

        // Seleccionar los primeros numIndicesToSelect Ã­ndices de la lista barajada
        List<Integer> selectedIndices = validIndices.subList(0, numIndicesToSelect);

        // Establecer la selecciÃ³n en el JList
        modeList.setSelectedIndices(selectedIndices.stream().mapToInt(i -> i).toArray());   
    }//GEN-LAST:event_randomBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        modeList.setSelectedIndex(0); // TODO 0? DEFAULT INDEX MODEL
    }//GEN-LAST:event_resetBtnActionPerformed

    private void modeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_modeListValueChanged
        
        if (evt.getValueIsAdjusting()) return;
    
        int[] selectedIndices = modeList.getSelectedIndices();

        if (selectedIndices.length > 1 && selectedIndices[0] == 0) {
            // Deseleccionar el primer Ã­tem si hay otros Ã­tems seleccionados
            modeList.removeSelectionInterval(0, 0);
        }
    }//GEN-LAST:event_modeListValueChanged

    public void setBackBtnListener(ActionListener listener) {
        backBtn.addActionListener(listener);
    }
    
    public void setPlayBtnListener(ActionListener listener) {
        playBtn.addActionListener(listener);
    }
    
    public void setModeListModel(List<String> names, int selectedIndex) {
        
        DefaultListModel<String> modeListModel = new DefaultListModel<>();
        
        modeListModel.addElement("Mix Blindly");
        
        for (String modeName : names) {
            modeListModel.addElement(modeName);
        }
        
        modeList.setModel(modeListModel);
        modeList.setSelectedIndex(selectedIndex);
        
        initModeList();
    }

    public List<String> getModeListSelectedValues() {
        return modeList.getSelectedValuesList();
    }
    
    public void setWindowClosingListener () {
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                playBtn.doClick();
            }
        });
    }
    
    private void initModeList() {
        DefaultListCellRenderer renderer = (DefaultListCellRenderer) modeList.getCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        
        updateModeListHeight();
    }
    
    private void updateModeListHeight() {

        int cellHeight = modeList.getFixedCellHeight();
        int listHeight = cellHeight * Math.min(modeList.getModel().getSize(), 7);
        Insets scrollPaneInsets = modeListScroll.getInsets();
        
        int totalHeight = listHeight + scrollPaneInsets.top + scrollPaneInsets.bottom;

        modeListScroll.setPreferredSize(new Dimension(200, totalHeight));

        modeListScroll.revalidate();
        modeListScroll.repaint();
        this.pack();

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JList<String> modeList;
    private javax.swing.JScrollPane modeListScroll;
    private javax.swing.JButton playBtn;
    private javax.swing.JButton randomBtn;
    private javax.swing.JButton resetBtn;
    // End of variables declaration//GEN-END:variables
}
